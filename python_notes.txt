#Python 2.7

# quicksort
def quicksort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) / 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)
    
print quicksort([3,6,8,10,1,2,1])

#-------------- Numbers --------------#
x = 3
print type(x) # Prints "<type 'int'>"
print x       # Prints "3"
print x ** 2  # Exponentiation; prints "9"
x *= 2
y = 2.5
print type(y) # Prints "<type 'float'>"
print y, y + 1, y * 2, y ** 2 # Prints "2.5 3.5 5.0 6.25"

# no x++ x--


#-------------- Boolean --------------#
t = True
f = False
print type(t) 	# Prints "<type 'bool'>"
print t and f 		
print t or f  		
print not t   		
print t != f  	# Logical XOR; prints "True" 


#-------------- String --------------#
hello = 'hello'   							# String literals can use single quotes
world = "world"  							# or double quotes; it does not matter.

print len(hello)  							# String length; prints "5"
hw = hello + ' ' + world  					# String concatenation
hw12 = '%s %s %d' % (hello, world, 12)  	# sprintf style string formatting

print hello.replace('l', '(ell)') 			# prints "he(ell)(ell)o"
print '  world '.strip()  					# Strip leading and trailing whitespace; prints "world"

# for more https://docs.python.org/2/library/stdtypes.html#string-methods


#-------------- List --------------#
xs = [3, 1, 2]   # Create a list
print xs, xs[2]  # Prints "[3, 1, 2] 2"
print xs[-1]     # Negative indices count from the end of the list; prints "2"
print xs[-4]     # Throws an error if index is < - list.size

xs[2] = 'foo'    # Lists can contain elements of different types
print xs         # Prints "[3, 1, 'foo']"
xs.append('bar') # Add a new element to the end of the list
print xs         # Prints "[3, 1, 'foo', 'bar']"
x = xs.pop()     # Remove and return the LAST element of the list
print x, xs      # Prints "bar [3, 1, 'foo']"


#--- slicing ---#
nums = range(5)    # creates a list of integers 						[0, 1, 2, 3, 4]
print nums[2:4]    # Get a slice from index 2 to 4 (exclusive); 		[2, 3]
print nums[2:]     # Get a slice from index 2 to the end; 				[2, 3, 4]
print nums[:2]     # Get a slice from the start to index 2 (exclusive)	[0, 1]
print nums[:]      # Get a slice of the whole list;						[0, 1, 2, 3, 4]
print nums[:-1]    # Slice indices can be negative; 					[0, 1, 2, 3]

nums[2:4] = [8, 9] # Assign a new sublist to a slice 					[0, 1, 8, 9, 4]


#--- loop ---#
for x in list:
	print x

for i, x in enumerate(list):	# retrieve the index
    print '%d and %s' % (i, x)


#--- list comprehension ---#
# similar to ML map
nums = [0, 1, 2, 3, 4]
squares = [x ** 2 for x in nums]
print squares   # Prints [0, 1, 4, 9, 16]

# similar to ML filter
nums = [0, 1, 2, 3, 4]
even_squares = [x ** 2 for x in nums if x % 2 == 0]
print even_squares  # Prints "[0, 4, 16]"


#-------------- Dictionary --------------#
http://cs231n.github.io/python-numpy-tutorial/
#-------------- Set --------------#
#-------------- Tuple --------------#


#-------------- Function --------------#
# Can have optional keyword arguments, like this:

def hello(name, loud=False):
    if loud:
        print 'HELLO, %s!' % name.upper()
    else:
        print 'Hello, %s' % name

hello('Bob') # Prints "Hello, Bob"
hello('Fred', loud=True)  # Prints "HELLO, FRED!"



#-------------- Class --------------#
class Greeter(object):		# inherited from object class
    
    # Constructor
    def __init__(self, name):
        self.name = name  # Create an instance variable
        
    # Instance method
    def greet(self, loud=False):
        if loud:
            print 'HELLO, %s!' % self.name.upper()
        else:
            print 'Hello, %s' % self.name
        
g = Greeter('Fred')  # Construct an instance of the Greeter class
g.greet()            # Call an instance method; prints "Hello, Fred"
g.greet(loud=True)   # Call an instance method; prints "HELLO, FRED!"




